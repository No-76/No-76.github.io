import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as i,b as d,d as h,e as k,w as l,r as g,o as A,f as s}from"./app-BZbt6How.js";const o="/assets/image-16-Di8-cgrD.png",c="/assets/image-18-Cq7y3Iyo.png",y={};function B(u,a){const t=g("CodeTabs");return A(),p("div",null,[a[8]||(a[8]=i("h1",{id:"设计模式",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#设计模式"},[i("span",null,"设计模式")])],-1)),a[9]||(a[9]=i("p",null,"结合尚硅谷设计模式和书籍《图解设计模式》。首先是基础讲解，然后是各个设计模式。",-1)),d(" more "),a[10]||(a[10]=h('<h2 id="类图和七大设计原则" tabindex="-1"><a class="header-anchor" href="#类图和七大设计原则"><span>类图和七大设计原则</span></a></h2><h2 id="交给子类" tabindex="-1"><a class="header-anchor" href="#交给子类"><span>交给子类</span></a></h2><p>交给子类的设计模式主要有两种，模板方法(Template Method)模式和工厂模式，区别在于模板方式相当于一个加工线，关注的是在一系列固定的流程模板中具体某个算法的实现，由子类在父加工线的基础上实现自己的算法步骤，算法步骤流程由父类定义。而工厂模式相当于一个工厂，主要职责是创建对，子类可以通过实现父类的创建逻辑，自由选择创建哪种类型的对象，工厂模式关注的是对象的创建，而非算法步骤的具体实现。</p><h2 id="生成实例" tabindex="-1"><a class="header-anchor" href="#生成实例"><span>生成实例</span></a></h2><p>待总结</p><h3 id="singleton模式-只有一个实例" tabindex="-1"><a class="header-anchor" href="#singleton模式-只有一个实例"><span>Singleton模式 - 只有一个实例</span></a></h3><p>单例模式可以分为静态常量饿汉式，静态代码块饿汉式，线程不安全懒汉式，线程安全懒汉式和同步代码块懒汉式。例如jdk中的RunTime就是经典的单例模式且是恶汉，保证系统中时间只有一个实例。还有SpringBoot中的bean的单例模式比较像饿汉式思想。<br> 其中饿汉式单例对象由静态属性持有，要提前准备好，防止以后饿的时候才创建。而懒汉式则是在第一次调用的时候才创建，懒得做饭，饿的时候才会去调用创建。</p><ol><li><strong>饿汉式</strong></li></ol><p>通过使用私有的构造函数保证单例，基于类加载器的机制构造实例避免线程安全问题。</p>',9)),k(t,{id:"38",data:[{id:"静态常量"},{id:"静态代码块"}]},{title0:l(({value:n,isActive:e})=>a[0]||(a[0]=[s("静态常量")])),title1:l(({value:n,isActive:e})=>a[1]||(a[1]=[s("静态代码块")])),tab0:l(({value:n,isActive:e})=>a[2]||(a[2]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," Singleton{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," final"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"()"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"(){}"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," getInstance"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:l(({value:n,isActive:e})=>a[3]||(a[3]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," Singleton{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," final"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    static"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"        singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"()"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"(){}"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," getInstance"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),a[11]||(a[11]=i("p",null,"缺点是在装载时候实现实例化，没有达到懒加载的效果，从而导致内存浪费。",-1)),a[12]||(a[12]=i("ol",{start:"2"},[i("li",null,[i("strong",null,"懒汉式")])],-1)),a[13]||(a[13]=i("p",null,"通过使用私有的构造函数保证单例，但是不是基于类加载器,volatile常用于多线程，一个线程更改后会立即写入堆内存，其他线程可以立即读取。",-1)),k(t,{id:"62",data:[{id:"线程不安全懒汉式"},{id:"线程安全懒汉式"}]},{title0:l(({value:n,isActive:e})=>a[4]||(a[4]=[s("线程不安全懒汉式")])),title1:l(({value:n,isActive:e})=>a[5]||(a[5]=[s("线程安全懒汉式")])),tab0:l(({value:n,isActive:e})=>a[6]||(a[6]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," class"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," null"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(){};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," getInstance"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," null"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"            singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," singleton;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:l(({value:n,isActive:e})=>a[7]||(a[7]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," class"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," volatile"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," null"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(){};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," static"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Singleton"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," getInstance"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," null"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"            synchronized"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"                if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," null"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"                    singleton "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Singleton"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"                }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," singleton;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),a[14]||(a[14]=h(`<p>缺点是线程不安全懒汉式如果高并发会产生多个实例，而线程安全懒汉式通过双重检查避免了懒加载的问题，但缺点是单例对象可能会被反复创建，因为存在gc的问题。一般场景使用懒汉式。</p><h3 id="prototype模式-原型模式" tabindex="-1"><a class="header-anchor" href="#prototype模式-原型模式"><span>Prototype模式-原型模式</span></a></h3><p>不使用对象生成实例，而是使用实例生成实例，可以简化对象的创建过程。不同于单例模式，通过实现Cloneable接口实现原型模式，主要调用Objec中的Clone方法。对于属性全部一致的对象，仍然是不同对象。Spring的bean通过配置属性为prototype，实现原型模式。</p><ol><li><p>浅拷贝：对于数据类型是引用数据类型的成员变量，浅拷贝（默认的clone）会将地址值引用传递，不会创建新的对象。基本数据类型成员变量才会复制。</p></li><li><p>深拷贝：复制对象所有基本数据类型成员变量值，为所有引用数据类型成员变量申请存储空间，需要拷贝整个对象。如何实现深拷贝有如下两种方法：</p><ul><li>通过重写clone方法对每一个引用数据类型单独处理，重新clone一个出来，需要一个一个处理。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Rectangle</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws CloneNotSupportedException {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Rectangle</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cloned </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Rectangle) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        cloned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">topLeft</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Point) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">topLeft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 深拷贝 Point 对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        cloned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bottomRight</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Point) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bottomRight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 深拷贝 Point 对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cloned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过对象序列化来实现深拷贝(推荐),将对象序列化出去，再序列化回来，不需要针对每一个引用数据类型一个一个处理。在Java中，序列化和反序列化过程中对于引用数据类型的行为是创建新的空间来存储序列化的数据。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将对象序列化到字节流</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ByteArrayOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ByteArrayOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ObjectOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> oos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjectOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bos)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    oos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">writeObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 从字节流中反序列化对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ByteArrayInputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ByteArrayInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toByteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ObjectInputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ois </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjectInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bis)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Rectangle) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ois</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="builder模式-建造者模式" tabindex="-1"><a class="header-anchor" href="#builder模式-建造者模式"><span>Builder模式-建造者模式</span></a></h3><p>建造者模式是一种创建型模式，用于构建复杂对象。它将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。建造者模式中有一下3个角色：</p><ul><li>Builder：抽象建造者，定义创建产品各个组成部件的抽象接口，并不强制要求实现。</li><li>ConcreteBuilder：具体建造者，实现抽象建造者接口中定义的方法，实现创建产品的各个部件。</li><li><strong>Director</strong>：指挥者，负责安排具体建造者按照要求<strong>完成复杂对象的创建</strong>，由指挥者确定流程，这点不同于<strong>模型方法</strong>模式流程已经固定。</li></ul><p>java中StringBuilder的源码类似于建造者模式思想，其中：</p><ul><li>Appendable(抽象建造者)接口定义了多个appende抽象方法。</li><li>AbstractStringBuilder(具体建造者)实现了接口方法。</li><li>StringBuilder(指挥者又是建造者)</li></ul><h2 id="分开考虑" tabindex="-1"><a class="header-anchor" href="#分开考虑"><span>分开考虑</span></a></h2><h3 id="bridge模式-桥接模式" tabindex="-1"><a class="header-anchor" href="#bridge模式-桥接模式"><span>Bridge模式-桥接模式</span></a></h3><p><img src="`+o+'" alt="alt text" loading="lazy"><br> 这个图展示的还是不够形象，桥接模式主要思想是吧类的功能抽象结构和类的实现结构分开，桥接模式中和左边的形状是个抽象类，下面继承实现了不同的类，都通过聚合右边实现功能层次和实现结构的分离。由n*n的类体量变成了n+n。其中JDBC就有点像</p><h3 id="strategy模式-策略模式" tabindex="-1"><a class="header-anchor" href="#strategy模式-策略模式"><span>Strategy模式-策略模式</span></a></h3><p>策略模式更关注的是策略的转换，其实跟桥接模式有点类似，通过将对象聚合一个策略接口，然后创建对象实例的时候就可以选择不同的策略，从而实现这个对象和策略的解。Arrays.sort方法就使用了策略模式，因为comparator参数本身是一个接口，它下面就可以实现不同的策略。<br> 如线程中Runable接口，Runnable接口本身类似于策略模式中的策略接口，它定义了一个算法的框架（即run()方法）.现Runnable接口的类类似于策略模式中的具体策略类，每个类都实现了具体的run()方法，定义了具体的任务逻辑.Thread类类似于策略模式中的上下文（Context），它持有一个策略对象（即Runnable对象），并调用策略对象的run()方法来执行任务.</p><h2 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性"><span>一致性</span></a></h2><h3 id="decorator模式-装饰模式" tabindex="-1"><a class="header-anchor" href="#decorator模式-装饰模式"><span>Decorator模式-装饰模式</span></a></h3><p>装饰模式确保了装饰器（Decorator）和被装饰对象（Component）都遵循同一个接口,具有接口一致性和行为一致性等。代码核心是生成了一个装饰类，这个类里聚合了一个被装饰的父类定义的对象，同时它又可以被各个具体的装饰体继承，代表m对n的装饰关系。在Java中，IO流就是一个典型的装饰模式的应用。例如，BufferedReader 和 DataInputStream 都是装饰器，它们可以用来装饰底层的流对象，以提供更多的功能，如缓冲输入或处理特定的数据类型</p><h3 id="composite模式-组合模式" tabindex="-1"><a class="header-anchor" href="#composite模式-组合模式"><span>Composite模式-组合模式</span></a></h3><p>当要处理的对象可以生成一颗树形结构，而且需要对树上节点和叶子节点进行操作，能够提供一致的方式，不用考虑是节点还是叶子。下图部分是有误的，聚合操作时将父亲也就是OriganzationComponent对象聚合到子节点中。<br><img src="'+c+'" alt="alt text" loading="lazy"><br> 而组合模式和装饰模式的区别在于，装饰模式时两层结构，而组合模式往往是多层的，一层一层的装饰。相同点是不同层都要继承相同的父类。</p><h2 id="学不动了" tabindex="-1"><a class="header-anchor" href="#学不动了"><span>学不动了</span></a></h2><p>因为学不动了，所以学了两个比较重要的，观察者模式和代理模式。</p><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h3><p>目的是发送状态变化通知。有点像发布订阅的思想,主要有四个角色:</p><ul><li>Subject(被观察者)：抽象主题，定义了添加、删除、通知观察者的方法，同时聚合了抽象的Observer对象。</li><li>ConcreateSubject(具体被观察者)：具体主题，实现抽象主题中的抽象方法，具体主题的内部状态发生改变时，给所有注册过的观察者对象<strong>发送通知</strong>。</li><li>Observer(抽象观察者)：抽象观察者，定义了更新接口，当接到主题通知时进行响应。</li><li>ConcreateObserver(具体观察者)：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题通知时更新自身的状态。可以有多个不同观察者，实现N对1的观察订阅。<br> java中有根据这个实现的类Observer，还有Observable，但是jdk9后被弃用。</li></ul><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h3><p>只在必要时生成实例，避免浪费。</p><ul><li>静态代理：有点像装饰模式，在代理类里通过聚合父接口的方法聚合一个被代理类，然后调用被代理类的方法。</li><li>动态JDK代理：代理对象不需要实现接口，目标对象仍需要，代理对象的生成是利用JDK的API，动态的在内存中构建一个代理对象(反射机制)。</li><li>动态Cglib代理：Cglib也叫子类代理，主要用于处理目标对象并没有实现一个接口的情况，使用目标对象子类来实现代理。底层是通过字节码处理框架ASM来转换字节码并生成新的类。</li></ul>',27))])}const v=r(y,[["render",B]]),m=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"tittle":"设计模式","icon":"pen-to-square","date":"2024-12-27T00:00:00.000Z","category":["JVM"],"timeline":true,"tag":["设计模式"],"description":"结合尚硅谷设计模式和书籍《图解设计模式》。首先是基础讲解，然后是各个设计模式。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"结合尚硅谷设计模式和书籍《图解设计模式》。首先是基础讲解，然后是各个设计模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-11T14:07:00.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2024-12-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-11T14:07:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-11T14:07:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"类图和七大设计原则","slug":"类图和七大设计原则","link":"#类图和七大设计原则","children":[]},{"level":2,"title":"交给子类","slug":"交给子类","link":"#交给子类","children":[]},{"level":2,"title":"生成实例","slug":"生成实例","link":"#生成实例","children":[{"level":3,"title":"Singleton模式 - 只有一个实例","slug":"singleton模式-只有一个实例","link":"#singleton模式-只有一个实例","children":[]},{"level":3,"title":"Prototype模式-原型模式","slug":"prototype模式-原型模式","link":"#prototype模式-原型模式","children":[]},{"level":3,"title":"Builder模式-建造者模式","slug":"builder模式-建造者模式","link":"#builder模式-建造者模式","children":[]}]},{"level":2,"title":"分开考虑","slug":"分开考虑","link":"#分开考虑","children":[{"level":3,"title":"Bridge模式-桥接模式","slug":"bridge模式-桥接模式","link":"#bridge模式-桥接模式","children":[]},{"level":3,"title":"Strategy模式-策略模式","slug":"strategy模式-策略模式","link":"#strategy模式-策略模式","children":[]}]},{"level":2,"title":"一致性","slug":"一致性","link":"#一致性","children":[{"level":3,"title":"Decorator模式-装饰模式","slug":"decorator模式-装饰模式","link":"#decorator模式-装饰模式","children":[]},{"level":3,"title":"Composite模式-组合模式","slug":"composite模式-组合模式","link":"#composite模式-组合模式","children":[]}]},{"level":2,"title":"学不动了","slug":"学不动了","link":"#学不动了","children":[{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]}]}],"git":{"createdTime":1735051107000,"updatedTime":1741702020000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":3}]},"readingTime":{"minutes":8.63,"words":2590},"filePathRelative":"java笔记/设计模式.md","localizedDate":"2024年12月27日","excerpt":"\\n<p>结合尚硅谷设计模式和书籍《图解设计模式》。首先是基础讲解，然后是各个设计模式。</p>\\n","autoDesc":true}');export{v as comp,m as data};
