import{_ as r}from"./image-7-D2IAFFCa.js";import{_ as o,c as a,a as e,b as i,d as l,o as n}from"./app-DiW223AJ.js";const s="/assets/image-4-BDtOrmrJ.png",m="/assets/image-5-BRN3vtFy.png",p="/assets/image-6-EmBoJljm.png",c={};function g(d,t){return n(),a("div",null,[t[0]||(t[0]=e("h1",{id:"jvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jvm"},[e("span",null,"JVM")])],-1)),t[1]||(t[1]=e("p",null,"暂无",-1)),i(" more "),t[2]||(t[2]=l('<h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收"><span>垃圾回收</span></a></h2><p>在Java中，垃圾回收器（Garbage Collector）负责回收不再使用的对象。垃圾回收器是一个后台线程。</p><ol><li>可达性分析：通过一系列成为&quot;GC Roots&quot;的对象开始，通过引用链找到所有可以访问到的对象。GC ROOTS包含：</li></ol><ul><li>栈中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈JNI 引用的对象</li></ul><ol start="2"><li>回收算法：<br><strong>标记-清除算法</strong>：产生大量内存碎片。<br><strong>标记-整理算法</strong>：无内存碎片。<br><strong>复制算法</strong>：将内存分为两块，每次只使用一块，当这一块用完，反复复制实现去除碎片。<br><strong>分代垃圾回收</strong>：分为新生代和老年代，新生代包含eden、survivor(包括from和to区)。 <ul><li>Minor GC:也称为新生代GC，是针对新生代survivor区的垃圾回收。<strong>采用复制算法</strong>，开始全部放在伊甸区，存活下来进入form区并且年龄不断增大，from区被回收的进入to区等待下次垃圾回收，再回到from区(from和to来回互换，总比例8：1：1)。回收后进入老年区。</li><li>Full GC:也称为Major GC或老年代GC，是针对整个内存的垃圾回收。当老年代、元空间或者堆空间满时触发。<strong>采用标记-整理算法</strong>。</li></ul></li><li>垃圾收集器：</li></ol><ul><li>Serial：最基本的收集器，单线程，回收效率高，需要STW。<br><img src="'+s+'" alt="alt text" loading="lazy"></li><li>ParNew：基于Serial的并行收集器，多线程，但需要STW。适合多cpu(单cpu线程切换需要开销)<br><img src="'+m+'" alt="alt text" loading="lazy"><br><strong>老年代也能并行，别的收集器</strong></li><li>CMS：Concurrent Mark Sweep，并发标记-清除算法，分为四步：1.初始标记（仅仅标记GC ROOT关联的）--&gt;2.并发标记---&gt;3.并发清除---&gt;4.并发复制。只有初始标记和并发标记需要STW。缺点：并发清除阶段垃圾无法清除产生浮动垃圾(浮动垃圾过多时候需要采用备胎Serial)，大量垃圾碎片。<br><img src="'+p+'" alt="alt text" loading="lazy"></li><li>G1：Garbage Fisrt，默认的垃圾收集器。化整为零，将内存化为上千个部分，采用分代回收，灵活分配。<br><img src="'+r+'" alt="alt text" loading="lazy"></li></ul>',6))])}const y=o(c,[["render",g],["__file","JVM.html.vue"]]),b=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/JVM.html","title":"JVM","lang":"zh-CN","frontmatter":{"tittle":"java","icon":"pen-to-square","date":"2024-11-30T00:00:00.000Z","category":["JVM"],"timeline":true,"tag":["JVM","垃圾回收","内存泄漏"],"description":"暂无","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/JVM.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"暂无"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T15:47:54.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:tag","content":"垃圾回收"}],["meta",{"property":"article:tag","content":"内存泄漏"}],["meta",{"property":"article:published_time","content":"2024-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T15:47:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T15:47:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[]}],"git":{"createdTime":1732722474000,"updatedTime":1732722474000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":1}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"java笔记/JVM.md","localizedDate":"2024年11月30日","excerpt":"\\n<p>暂无</p>\\n","autoDesc":true}');export{y as comp,b as data};
