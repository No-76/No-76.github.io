import{_ as o,c as t,a as i,b as a,d as l,o as n}from"./app-DiW223AJ.js";const r={};function d(s,e){return n(),t("div",null,[e[0]||(e[0]=i("h1",{id:"注解",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#注解"},[i("span",null,"注解")])],-1)),e[1]||(e[1]=i("p",null,"记录下Spirng常用注解",-1)),a(" more "),e[2]||(e[2]=l(`<h2 id="controller层注解" tabindex="-1"><a class="header-anchor" href="#controller层注解"><span>Controller层注解</span></a></h2><ul><li><code>@RequestParam</code>和<code>@RequestBody</code><br> 它允许你将请求体中的数据直接绑定到一个 Java 对象上，使用消息转换器，而不需要手动解析。可以减少处理 HTTP 请求数据的模板代码，使开发者可以更专注于业务逻辑。而<code>@RequestParam</code>主要处理简单类型的数据，而<code>@RequestBody</code>用于处理请求体中的数据,相比更复杂，如 JSON 或 XML 格式的数据。</li><li><code>@ResponBody</code><br><code>@RestController= @Controller + @ResponseBody</code>其中ResponBody作用在controller类或者方法中上，将方法返回值直接响应，如果返回值类型是实体对象/集合，则为JSON格式数据。</li></ul><h2 id="ioc-di注解" tabindex="-1"><a class="header-anchor" href="#ioc-di注解"><span>IOC&amp;DI注解</span></a></h2><ul><li><code>@Component</code><br> 控制反转注解，声明bean的机制注解，主要用于三层架构中的service层与dao层，将类放置于IOC容器中以便实现后续的解耦。它有三种衍生注解:<code>@Controller</code>,<code>@Service</code>和<code>@Repository</code>(标注在数据访问类上，由于与mybatis整合，用的少)。对于一些工具类，并不属于三层结构的，则使用注解<code>@Component</code>，否则使用衍生注解。</li><li><code>@ComponentScan</code><br> 不需要显示配置，但是实际上已经包含在了启动类声明注解@SpringBootApplication中，默认扫描的范围是启动类所在的包以及其子包。</li><li><code>@Autowired</code><br> 依赖注入注解，主要用于解耦过程中对象声明。例如:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EmpService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> EmpService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //右侧无需new service层对象以实现解耦过程。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以下三个注解用来解决多个相同类型bean的情况</strong></p><ul><li><code>@Primary</code><br> 用于和Component组件注解同时使用，标注优先级。</li><li><code>@Qualifier</code><br> 意思是资格赛，匹配符，通过与Autowored注解同时使用来标注使用哪个bean对象。</li><li><code>@Resource</code><br> 并不是springboot注解，而是jdk注解，不需要与Autowired配合使用，相当于Autowired+Qualifier</li></ul><h2 id="bean注解" tabindex="-1"><a class="header-anchor" href="#bean注解"><span>Bean注解</span></a></h2><ul><li><code>@Scope</code><br> 配置作用域，默认只有单个bean，容器启动时就被创建，设置为prototype之后，每一次使用bean都会创建一个新的实例。</li><li><code>@Bean</code><br> 标注在方法之上，类似于<code>@Component</code>注解，不过对于第三方（不是自定义的），是无法使用<code>@Component</code>来标注的，需要用<code>@Bean</code>来标注外部注解。</li><li><code>@Configuration</code><br> 标注类之上， 注解声明一个配置类，用于统一存放管理第三方bean对象。</li></ul><h2 id="mybatis注解" tabindex="-1"><a class="header-anchor" href="#mybatis注解"><span>Mybatis注解</span></a></h2><ul><li><code>@Options</code><br> 使用方法：<code>@Options(keyProperty = &quot;id&quot;,useGeneratedKeys=true)</code>，放在Insert注解之上时，构造的新增对象会拿到一个主键的返回值，否则无返回值。</li></ul><h2 id="工具库注解" tabindex="-1"><a class="header-anchor" href="#工具库注解"><span>工具库注解</span></a></h2><ul><li><code>@Slf4j </code><br> @Slf4j 是 Lombok 库提供的一个注解，它用于在类中自动生成一个日志对象,相当于执行创建代码。</li></ul><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><ul><li><code>@RestControllerAdvice </code></li><li><code>@ExceptionHandler </code></li></ul><h2 id="事务管理" tabindex="-1"><a class="header-anchor" href="#事务管理"><span>事务管理</span></a></h2><ul><li><code>@Transactional</code><br> 在方法，类，接口之上，表示将该方法交给spring进行事务管理，方法执行前，开启事务；成功执行，提交事务；出现异常，回滚事务。通过参数<code>rollbackfor</code>控制回滚的异常类型，默认只会回滚运行异常。</li></ul><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>AOP</span></a></h2><ul><li><code>@Aspect</code><br> 通常与<code>@Component</code>一同使用，用于标注为AOP程序。</li></ul><h3 id="通知类型注解" tabindex="-1"><a class="header-anchor" href="#通知类型注解"><span>通知类型注解</span></a></h3><p>放在方法前，定义该方法针对的业务范围。即切入点表达式。</p><ul><li><code>@Around</code></li><li><code>@Before</code></li><li><code>@After</code></li><li><code>@AfterReturning</code></li><li><code>@AfterThrowing</code></li></ul>`,22))])}const p=o(r,[["render",d],["__file","注解.html.vue"]]),h=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/%E6%B3%A8%E8%A7%A3.html","title":"注解","lang":"zh-CN","frontmatter":{"tittle":"SpringBoot","icon":"pen-to-square","date":"2024-10-8","category":["Java"],"timeline":true,"tag":["Java"],"description":"记录下Spirng常用注解","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"记录下Spirng常用注解"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-31T12:55:58.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T12:55:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-31T12:55:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"Controller层注解","slug":"controller层注解","link":"#controller层注解","children":[]},{"level":2,"title":"IOC&DI注解","slug":"ioc-di注解","link":"#ioc-di注解","children":[]},{"level":2,"title":"Bean注解","slug":"bean注解","link":"#bean注解","children":[]},{"level":2,"title":"Mybatis注解","slug":"mybatis注解","link":"#mybatis注解","children":[]},{"level":2,"title":"工具库注解","slug":"工具库注解","link":"#工具库注解","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":2,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[]},{"level":2,"title":"AOP","slug":"aop","link":"#aop","children":[{"level":3,"title":"通知类型注解","slug":"通知类型注解","link":"#通知类型注解","children":[]}]}],"git":{"createdTime":1728892217000,"updatedTime":1730379358000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":2}]},"readingTime":{"minutes":2.79,"words":837},"filePathRelative":"java笔记/注解.md","localizedDate":"2024年10月8日","excerpt":"\\n<p>记录下Spirng常用注解</p>\\n","autoDesc":true}');export{p as comp,h as data};
