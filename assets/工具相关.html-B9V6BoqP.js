import{_ as e,c as n,a as s,b as l,d as a,o as t}from"./app-CNBADV95.js";const h="/assets/image-2-1DvIQOAI.png",r="/assets/image-3-Cynoq2tN.png",p={};function d(k,i){return t(),n("div",null,[i[0]||(i[0]=s("h1",{id:"工具相关",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#工具相关"},[s("span",null,"工具相关")])],-1)),i[1]||(i[1]=s("p",null,"记录写Spring使用过程中常用的一些工具。",-1)),l(" more "),i[2]||(i[2]=a('<h2 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet"><span>Servlet</span></a></h2><p>用于开发服务器端应用程序，运行再web服务器上如tomcat。HttpServlet 是一个抽象类，继承自 GenericServlet 类，专门用于处理 HTTP 请求。</p><p><strong>HTTP请求数据格式</strong>：</p><ol><li>请求行：请求方式 请求url 请求协议/版本锁定</li><li>请求头：请求头信息</li><li>请求空行：空行，用来分割头部分和体部分</li><li>请求头：正文</li></ol><p>Get： 请求参数在请求行中，也就是拼接在url后。且请求url长度有限制，且不安全。不会产生中文乱码。</p><p>Post：请求参数在请求体中。请求url长度没有限制，因此图片上传用post。会产生中文乱码，需要序列化。</p><p><strong>请求头中信息</strong>：</p><ul><li>UserAgent：告诉服务器，访问使用的浏览器信息。以便跨平台。</li><li>Aceept：告诉服务器我能接受的信息格式。</li><li>Referer：告诉服务器，(我)从哪里来。用于防盗链和统计用户信息。</li><li>Connection ：是否保持长连接。(keep-alive)则可以被复用。</li></ul><p><strong>请求转发步骤：</strong></p><p>浏览器访问地址不变，只能在服务器内部转发，且仅仅有一次请求（转发前），一个有作用范围的对象，可以在范围内共享数据，一般请求转发的多个资源中共享数据方法。</p><ol><li>通过requst对象获取请求转发其对象RequestDispatcher requestDispatcher(String path).（不同于Spring中使用HttDispatcherServlet转发到控制器中）.</li><li>通过RequestDispatcher对象来进行转发foward(ServletRequest req, ServletResponse resp)</li></ol><h2 id="mybatis及plus" tabindex="-1"><a class="header-anchor" href="#mybatis及plus"><span>Mybatis及Plus</span></a></h2><p>笔记未完成状态。</p>',13)),l(" more "),i[3]||(i[3]=a('<h3 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>Mybatis</span></a></h3><h4 id="参数占位符" tabindex="-1"><a class="header-anchor" href="#参数占位符"><span>参数占位符</span></a></h4><ul><li><code>#{...} </code><ul><li>执行SQL时，会将#{...}替换为？，生成预编译SQL，会自动设置参数。</li><li>使用时机：参数传递时，都使用#{...}。</li></ul></li><li><code>${...}</code><ul><li>拼接SQL,直接将参数拼接到SQL语句中，存在SQL注入问题。登录密码千万不要这样设置。</li><li>使用时机，如果对表明，列表名进行动态设置时。</li></ul></li></ul><h4 id="xml映射标签" tabindex="-1"><a class="header-anchor" href="#xml映射标签"><span>XML映射标签</span></a></h4><ul><li><code>&lt;if&gt;</code></li><li><code>&lt;where&gt;</code></li><li><code>&lt;set&gt;</code></li><li><code>&lt;foreach&gt;</code></li><li><code>&lt;sql&gt; </code></li><li><code>&lt;include&gt;</code></li><li><code>&lt;association&gt;</code>: 关联对象,处理多对一的关联。</li><li><code>&lt;collection&gt;</code>：关联集合，处理一对多的关联。</li><li><code>&lt;resultMap&gt;</code>：将结果映射到实体类中。resultMap可以配合标签association或collection来实现级联查询。这两个标签内除了常见属性property、column之外，还可以设置其他属性，如javaType来指定实体类中参数类型(可以为对象类型)、select语句，实现多表查询。</li></ul><h3 id="mybatis-plus" tabindex="-1"><a class="header-anchor" href="#mybatis-plus"><span>Mybatis-Plus</span></a></h3><p>mp约定大于配置,mapper只需要继承BaseMapper即可。</p><h4 id="常见注解" tabindex="-1"><a class="header-anchor" href="#常见注解"><span>常见注解</span></a></h4><ul><li><code>@TableName</code>: 默认表名是类名下划线转换，如果不是，则需要添加该注解。</li><li><code>@TableId</code>: 指定主键，默认是id，如果没有id字段，则需要添加该注解。</li><li><code>@TableField</code>: 指定数据库字段，默认是属性名，<strong>如果数据库字段和属性名不一致</strong>，则需要添加该注解。<strong>如果数据库字段名is开头</strong>，则需要添加@TableField(value = &quot;is_xxx&quot;)，否则会报错。<strong>如果成员不是数据库字段</strong>，则需要添加@TableField(exist = false)。</li></ul><h4 id="核心功能" tabindex="-1"><a class="header-anchor" href="#核心功能"><span>核心功能</span></a></h4><ol><li>条件构造器：</li></ol><ul><li>QueryWrapper和LambdaQueryWrapper，用于构造增删改查的where条件部分。</li><li>UpdateWrapper和LambdaUpdateWrapper，通常只在有set的语句中使用。</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper，避免硬编码。</li></ul><ol start="2"><li>自定义SQL<br><img src="'+h+`" alt="alt text" loading="lazy"></li><li>IService接口<br> IService接口和ServiceImpl实现类是MP中的另一功能。其实现了CRUD功能，可以简化开发。只需继承即可。</li></ol><ul><li>lambda方法<br> 如lambdaQuery，lambdaUpdate等。主要处理复杂逻辑。小于函数lt，小于等于le，大于gt，大于等于ge等。如：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lambdaQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">like</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,User</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getName, name)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,User</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getAge, age)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(User</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getSex, sex)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Db静态工具类<br> Db.lambdaQuery() 是一个静态方法，可以在任何地方使用，不需要依赖注入。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lambdaQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, User</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getAge, ageStart, ageEnd)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">groupBy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(User</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getSex)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">having</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;avg(age)&gt;?&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>逻辑删除<br> MP提供逻辑删除功能，无需改变调用方法，直接在底层帮我们自动修改CRUD操作。只需要在application.yml中配置即可。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mabatis</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">plus</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  global</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">config</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    db</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">config</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 逻辑删除字段名,数据类型可以是booolen or int</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      logic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">field</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> delFlag </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      logic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      logic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>分页插件</li></ol><h2 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h2><p>Maven是一个项目管理和构建自动化工具,它使用一个名为 POM（Project Object Model）的 XML 文件来描述项目的构建过程、依赖关系和其他配置。</p><ul><li>继承与聚合？</li><li>聚合工程？<br> 标签<code>&lt;modules&gt; </code></li><li>版本锁定？<br> 标签<code>&lt;Dependencymanage&gt;</code></li></ul><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h2><p>是一个开源的键值存储系统，通常用作数据库、缓存和消息代理。</p><ul><li>字符串(String) <ul><li>set key value：设置指定key的值</li><li>get key：获取指定key的值</li><li>setex key seconds value：设置指定key的值，并将key的过期时间设为seconds秒</li><li>setnx key value 只有在key不存在时设置key的值</li></ul></li><li>哈希(Hash) <ul><li>HSET key field value：将哈希表 key 中的字段 field 的值设为 value</li><li>HGET key field：获取存储在哈希表中指定字段的值。</li><li>hdel key field:删除哈希表中指定字段</li><li>hkeys key：获取哈希表中所有字段</li><li>hvals key：获取哈希表中所有值</li></ul></li><li>列表(List) <ul><li>l(r)push key value:将一个或者多个插入到列表头部(尾部)</li><li>l(r)pop key value:移除一个或者多个列表头部(尾部)元素</li><li>llen key：获取列表长度</li></ul></li><li>集合(Set) <ul><li>sadd key member:向集合中加入一个或多个成员</li><li>srem key member:删除集合中的一个或多个成员</li><li>sinter key1 [key2]:求交集</li><li>sunion key1 [key2]:求并集</li></ul></li><li>有序集合(Sorted Set) <ul><li>zadd key socre member:向有序集合中添加一个或多个成员</li><li>zrem key member:移除有序集合中一个或多个成员</li><li>zrange key start stop:通过索引区间返回指定区间的成员</li><li>zincrby key increment member:对指定成员加上分数增量increment</li></ul></li><li>通用命令 <ul><li>keys parttern:查找给定模式的key</li><li>exists key:检查是否存在key</li><li>type key:返回key所储存的值的类型</li><li>del key:存在时删除key</li></ul></li></ul><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h2><p>拼接&amp;rewriteBatchedStatements=true实现批量插入。</p><ol><li>在MySQL中，查询结果的顺序并不总是按照你在IN列表中指定的顺序返回。这是因为MySQL的查询结果顺序主要取决于数据的存储方式和MySQL的内部优化机制。</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> your_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (id1, id2, id3) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FIELD(id, id1, id2, id3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="多表联合" tabindex="-1"><a class="header-anchor" href="#多表联合"><span>多表联合</span></a></h3><p>处理关联问题：</p><ul><li>同步存储：增加新的字段，在班级表中增加新的字段学生数量来进行维护。 <ul><li>优点：<br> 查询数量时只需要单表查询，执行速度快</li><li>缺点：<br> 需要维护额外的字段，维护成本高</li></ul></li><li>关联查询：编写关联查询语句，在mapper层进行封装。 <ul><li>优点：不需要额外的字段进行维护</li><li>缺点：查询较慢，当N较大时不适用</li></ul></li></ul><p>处理级联问题：</p><ul><li>级联查询：通常是指对象关系映射(ORM)中，即在查询时，将关联对象也查询出来。在mybatis中，使用association或collection标签来完成。</li></ul><h2 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h2><p>Kafka 是一个开源的分布式事件日志系统，单机吞吐量10w左右。</p><ul><li>应用场景 <ul><li>异步处理:将一些比较耗时的操作放在其他系统中</li><li>系统解耦:减少不同微服务之间的耦合性</li><li>流量削峰:根据消息队列高吞吐特性解决</li><li>日志处理(大数据领域)</li></ul></li><li>两种模型</li></ul><ol><li>生产者、消费者模型:不必保证消息的顺序，和消息持久化。</li><li>消息队列模式:必须保证消息的顺序性，和消息持久化。其中包括点对点，一对一。和发布订阅，一对多两种形式。</li></ol><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>docker</span></a></h2><p>docker主要负责镜像管理，和容器化。</p><ol><li>主要命令</li></ol><ul><li>dokcer run<br> 创建一个容器，-p 将容器端口映射到主机端口。-v [数据卷：容器内目录]/[本地目录：容器内目录] 完成数据挂载。</li><li>docker imgaes<br> 列出所有镜像,使用rmi删除镜像。</li></ul><ol start="2"><li>数据卷<br> 由于容器内只包含镜像所需要的一些依赖，直接在容器内进行操作比较麻烦，所以需要将容器内的数据映射到主机。<strong>数据卷</strong>是一个虚拟目录，是容器内目录和主机目录的映射。只需要将数据卷挂载到容器，即可实现主机和容器之间的双向绑定。<br> 通过docker volume --help命令即可查看数据卷的相关命令。</li><li>镜像构建<br><img src="`+r+`" alt="alt text" loading="lazy"><br> 分层打包的原因：方便下次使用。</li></ol><p><strong>前端搭建</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d \\</span></span>
<span class="line"><span>  --name nginx \\</span></span>
<span class="line"><span>  -p 80:80 \\</span></span>
<span class="line"><span>  -p 5174:5174 \\</span></span>
<span class="line"><span>  -p 5175:5175 \\</span></span>
<span class="line"><span>  -p 8080:8080 \\</span></span>
<span class="line"><span>  -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span></span>
<span class="line"><span>  -v /root/nginx/html:/usr/share/nginx/html \\</span></span>
<span class="line"><span>  nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：<br> 配置文件里server_name采用虚拟机ip，location里root指定的是挂载后地址/usr/share/nginx/html。</p><h2 id="elasticsearch" tabindex="-1"><a class="header-anchor" href="#elasticsearch"><span>Elasticsearch</span></a></h2><p>基本概念：</p><ul><li>倒排索引：将词条进行分词，然后建立倒排索引，将词条和文档进行关联。查询时先查询词条，得到id，再查关联的文档。</li><li>文档：要索引的数据，相当于数据库的一行记录。</li><li>索引：相同类型文档的集合，相当于数据库一张表。</li><li>映射：索引中文档的字段约束，类似于表的字段约束。</li><li>DSL: 查询语句，类似于SQL,语句本身是json格式。</li><li>type：字段数据类型。 <ul><li>字符串：text(可分词的文本)、keyword(精确值，品牌，国家，ip不可被分词)</li><li>数值：long、integer、short、byte、double、float、half_float、scaled_float</li><li>日期：date</li><li>布尔：boolean</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true。</li><li>analyzer：分词器(只有text需要指定)。</li><li>properties：嵌套需要，字段的子字段。</li></ul>`,50))])}const c=e(p,[["render",d],["__file","工具相关.html.vue"]]),g=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3.html","title":"工具相关","lang":"zh-CN","frontmatter":{"tittle":"工具相关","icon":"pen-to-square","date":"2024-10-8","category":["Java"],"timeline":true,"tag":["Java","Mybatis","Maven","Redis"],"description":"记录写Spring使用过程中常用的一些工具。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"工具相关"}],["meta",{"property":"og:description","content":"记录写Spring使用过程中常用的一些工具。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-17T16:05:13.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Mybatis"}],["meta",{"property":"article:tag","content":"Maven"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-17T16:05:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工具相关\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-17T16:05:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"Servlet","slug":"servlet","link":"#servlet","children":[]},{"level":2,"title":"Mybatis及Plus","slug":"mybatis及plus","link":"#mybatis及plus","children":[{"level":3,"title":"Mybatis","slug":"mybatis","link":"#mybatis","children":[]},{"level":3,"title":"Mybatis-Plus","slug":"mybatis-plus","link":"#mybatis-plus","children":[]}]},{"level":2,"title":"Maven","slug":"maven","link":"#maven","children":[]},{"level":2,"title":"Redis","slug":"redis","link":"#redis","children":[]},{"level":2,"title":"MySQL","slug":"mysql","link":"#mysql","children":[{"level":3,"title":"多表联合","slug":"多表联合","link":"#多表联合","children":[]}]},{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[]},{"level":2,"title":"docker","slug":"docker","link":"#docker","children":[]},{"level":2,"title":"Elasticsearch","slug":"elasticsearch","link":"#elasticsearch","children":[]}],"git":{"createdTime":1729059909000,"updatedTime":1734451513000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":8}]},"readingTime":{"minutes":8.29,"words":2486},"filePathRelative":"java笔记/工具相关.md","localizedDate":"2024年10月8日","excerpt":"\\n<p>记录写Spring使用过程中常用的一些工具。</p>\\n","autoDesc":true}');export{c as comp,g as data};
