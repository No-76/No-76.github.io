import{_ as a,c as e,a as s,b as t,d as l,o as n}from"./app-GqyZQ9VE.js";const h="/assets/image-8-CCRGHWuL.png",r={};function k(p,i){return n(),e("div",null,[i[0]||(i[0]=s("h1",{id:"java",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java"},[s("span",null,"java")])],-1)),i[1]||(i[1]=s("p",null,"暂无",-1)),t(" more "),i[2]||(i[2]=l('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><p>调用成员变量：编译看左边，运行看左边。<br> 调用成员方法：编译看左边，运行看右边。<br> 若父类中没有成员变量或方法，怎么都编译不通过。</p><h3 id="权限修饰符" tabindex="-1"><a class="header-anchor" href="#权限修饰符"><span>权限修饰符</span></a></h3><p>访问权限修饰符有四种：private&lt; default &lt; protected &lt; public。</p><h2 id="java数据结构" tabindex="-1"><a class="header-anchor" href="#java数据结构"><span>java数据结构</span></a></h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><ol><li><strong>String</strong>：字符串，不可变对象。</li><li><strong>StringBuilder</strong>：常用于单线程中，多线程使用不安全。</li><li><strong>StringBuffer</strong>：线程安全的，使用内部锁（这个锁是由对象本身提供的）来控制对它的访问，用于构建字符串。</li><li><strong>StringJoiner</strong>：可以指定分隔符和开头结尾，用于构建字符串。</li></ol><p>其中java底层对StringBuilder进行过处理，如果打印他的对象不会返回对象的地址值，而是属性值。</p><h3 id="队列和栈" tabindex="-1"><a class="header-anchor" href="#队列和栈"><span>队列和栈</span></a></h3><p>如果想要一个int类型数组，可以使用如下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapToInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h3><figure><img src="'+h+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="list列表" tabindex="-1"><a class="header-anchor" href="#list列表"><span>List列表</span></a></h4><ol><li><strong>ArrayList</strong>：动态数组，支持随机访问。</li><li><strong>LinkedList</strong>：链表，支持插入和删除操作。</li><li><strong>Vector</strong>：线程安全的 ArrayList，支持同步访问。</li></ol><p><strong>列表转数组方法</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该方法返回的是一个 Object 数组，而不是 T[] 类型的数组。如果想要一个Integer数组，可以使用如下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过new Integer[0]来避免自动装箱为Object[]，而因为0的存在限制了箱子大小，toArray()会创建一个大小合适的新数组。<br><strong>注意：</strong> Integer数组存储的是对象引用，每个引用占用4个字节（在32位和64位的JVM中），但每个Integer对象本身在堆上分配，所以实际上占用的内存更多。</p><h5 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h5><p>ArrayList的实现结构为数组，底层原理如下：</p><ol><li>不放数据默认容量为0。</li><li>当第一次放入时候，会创建一个长度为10(默认)的数组。</li><li>当数组大小不够时，会自动扩容(使用Arrays.copyOf)，扩容规则为： <ol><li>若能放下，则扩容为1.5倍。</li><li>若放不下，则扩充为加入新元素后的新数组大小。</li></ol></li></ol><h5 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h5><p>LindkedList的实现结构为链表，支持插入和删除操作,查询慢,增删快。</p><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h4><ol><li><strong>HashSet</strong>：基于哈希表的无序集合，不允许重复元素,且包含LinnkedHashSet。</li><li><strong>TreeSet</strong>：基于红黑树的有序集合，不允许重复元素。</li></ol><h5 id="hashset和linkedhashset" tabindex="-1"><a class="header-anchor" href="#hashset和linkedhashset"><span>HashSet和LinkedHashSet</span></a></h5><p>HashSet的实现结构为数组加链表加红黑树，底层原理如下：</p><ol><li><p>创建一个默认长度为16，默认加载因子为0.75的数组。</p></li><li><p>根据哈希值计算得到应该存入的位置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int index = (数组长度 -1) &amp; 哈希值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>当发生哈希碰撞时，使用equals方法判断，一致的话则去重，否则采用链表挂在后方。</p></li><li><p>当数组大小不够时，会自动扩容，扩容规则为：</p><ol><li>超过75%时，会自动将数组长度翻倍。</li><li>链表长度大于8，且数组长度大于64，转为红黑树。<br><strong>注意</strong>:当hash用来存储对象时，需要重写hashCode()和equals()方法，否则无法去重，因为原来是根据地址生成的hashCode，会导致相同对象存到不同位置。</li></ol></li></ol><p>LinkedHashSet跟HashSet一样，区别在于会用一个双向链表保存插入的顺序，因此可以保持插入的顺序。</p><h5 id="treeset" tabindex="-1"><a class="header-anchor" href="#treeset"><span>TreeSet</span></a></h5><p>TreeSet的实现机制为红黑树，不需要重写equals和hashCode方法，底层原理：当插入元素时，通过比较(默认使用comparabel接口，无法比较则需要构造比较器)构建红黑树。比较差值为0，则舍弃。</p><h2 id="函数编程" tabindex="-1"><a class="header-anchor" href="#函数编程"><span>函数编程</span></a></h2><h3 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h3><p>Stream流主要用在集合（Collection）类型数据的处理上，例如：过滤、映射、排序、查找等。</p><ol><li><strong>过滤</strong>：使用 <code>filter()</code> 方法，根据给定的条件（例如，大于 5）来过滤出符合条件的元素。</li><li><strong>映射</strong>：使用 <code>map()</code> 方法，将集合中的每个元素应用一个函数，得到一个新集合。</li><li><strong>排序</strong>：使用 <code>sorted()</code> 方法，对集合进行排序。</li><li><strong>查找</strong>：使用 <code>findAny()</code> 或 <code>findFirst()</code> 方法，返回流中的任意一个元素或第一个元素。</li><li><strong>收集</strong>：使用 <code>collect()</code> 方法，将流中的元素收集到一个集合中。collect 方法是 Terminal Operation，这意味着一旦执行了 collect 操作，流就会被消费，不能再被使用。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 过滤出大于5的元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 映射每个元素乘以2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 对结果进行排序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collectors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回HashMap中最大的值如何操作：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entrySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapToInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getValue).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">orelse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以下根据二进制1数目排序：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">boxed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">comparingInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Integer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bitCount).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenComparingInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Integer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intValue))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapToInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Integer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intValue)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collections" tabindex="-1"><a class="header-anchor" href="#collections"><span>Collections</span></a></h3><p>在 Java 中，<code>Collections</code> 是一个位于 <code>java.util</code> 包中的类，它包含了一系列静态方法，用于操作和返回集合（Collection）类型的实例。这些方法主要用于对集合进行排序、搜索、替换、倒转等操作。以下是一些常用的 <code>Collections</code> 类方法：</p><ol><li><p><strong>排序</strong></p><ul><li><code>sort(List&lt;?&gt; list)</code>: 按自然顺序对指定列表进行排序。</li><li><code>sort(List&lt;?&gt; list, Comparator&lt;? super T&gt; c)</code>: 按提供的比较器对列表进行排序。</li></ul></li><li><p><strong>搜索和替换</strong></p><ul><li><code>binarySearch(List&lt;? extends Comparable&lt;T&gt;&gt; list, T key)</code>: 在自然排序的列表中二分查找指定元素。</li><li><code>binarySearch(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</code>: 在使用比较器排序的列表中二分查找指定元素。</li><li><code>max(Collection&lt;? extends T&gt; coll)</code>: 返回集合中的最大元素。</li><li><code>min(Collection&lt;? extends T&gt; coll)</code>: 返回集合中的最小元素。</li></ul></li><li><p><strong>替换</strong></p><ul><li><code>replaceAll(List&lt;?&gt; list, Object oldVal, Object newVal)</code>: 将列表中所有等于 <code>oldVal</code> 的元素替换为 <code>newVal</code>。</li></ul></li><li><p><strong>倒转</strong></p><ul><li><code>reverse(List&lt;?&gt; list)</code>: 反转列表的顺序。</li></ul></li><li><p><strong>空集合</strong></p><ul><li><code>emptyList()</code>: 返回一个空的、不可修改的列表。</li><li><code>emptySet()</code>: 返回一个空的、不可修改的集合。</li><li><code>emptyMap()</code>: 返回一个空的、不可修改的映射。</li></ul></li></ol>`,48))])}const o=a(r,[["render",k],["__file","java.html.vue"]]),g=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/java.html","title":"java","lang":"zh-CN","frontmatter":{"tittle":"java","icon":"pen-to-square","date":"2024-9-18","category":["java笔记"],"timeline":true,"tag":["函数","算法"],"description":"暂无","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/java.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"java"}],["meta",{"property":"og:description","content":"暂无"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T12:52:34.000Z"}],["meta",{"property":"article:tag","content":"函数"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T12:52:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T12:52:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"权限修饰符","slug":"权限修饰符","link":"#权限修饰符","children":[]}]},{"level":2,"title":"java数据结构","slug":"java数据结构","link":"#java数据结构","children":[{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"队列和栈","slug":"队列和栈","link":"#队列和栈","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]}]},{"level":2,"title":"函数编程","slug":"函数编程","link":"#函数编程","children":[{"level":3,"title":"Stream","slug":"stream","link":"#stream","children":[]},{"level":3,"title":"Collections","slug":"collections","link":"#collections","children":[]}]}],"git":{"createdTime":1726742071000,"updatedTime":1732971154000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":6}]},"readingTime":{"minutes":5.15,"words":1544},"filePathRelative":"java笔记/java.md","localizedDate":"2024年9月18日","excerpt":"\\n<p>暂无</p>\\n","autoDesc":true}');export{o as comp,g as data};
