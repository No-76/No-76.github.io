import{_ as t,c as a,a as s,b as e,d as n,o as l}from"./app-D0BDPDwJ.js";const h={};function p(r,i){return l(),a("div",null,[i[0]||(i[0]=s("h1",{id:"套路",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#套路"},[s("span",null,"套路")])],-1)),i[1]||(i[1]=s("p",null,"记录一些刷leetcode时候没想到的一些套路。",-1)),e(" more "),i[2]||(i[2]=n(`<ul><li>字符串相关，可以考虑使用字典或者hash set相关数据结构，设长度为27。</li><li>状态相关，可以用几个数字代表不同状态。（二叉树摄像头问题）</li><li>树形dp相关，可以用数组记录递归过程中结果。（打家劫舍3）</li><li>循环数组相关<br> 1.可以拼接，擅长使用nums[i%size]。<br> 2.不考虑头尾。<br> 3.反复反转。</li><li>数组子序列有关常用递推关系式dp[i][j] = max(dp[i+1][j],dp[i][j-1])</li><li>数组求当前元素后更大或更小元素，可以使用单调栈减轻一个时间复杂度：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums)):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stack)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[stack[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                answer[stack[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stack[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                stack.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            stack.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于数组当前元素寻找两边比他大或者比他小的元素可以采取<strong>单调栈</strong>。数组头尾可以加0</li><li>发糖果问题考虑正反两次遍历</li></ul>`,3))])}const d=t(h,[["render",p],["__file","套路.html.vue"]]),o=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%A5%97%E8%B7%AF.html","title":"套路","lang":"zh-CN","frontmatter":{"tittle":"套路","icon":"pen-to-square","date":"2024-10-13T00:00:00.000Z","category":["算法笔记"],"timeline":true,"tag":["算法"],"description":"记录一些刷leetcode时候没想到的一些套路。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%A5%97%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"套路"}],["meta",{"property":"og:description","content":"记录一些刷leetcode时候没想到的一些套路。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T08:54:35.000Z"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T08:54:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"套路\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T08:54:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[],"git":{"createdTime":1728892217000,"updatedTime":1729673675000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":3}]},"readingTime":{"minutes":0.93,"words":280},"filePathRelative":"算法笔记/套路.md","localizedDate":"2024年10月13日","excerpt":"\\n<p>记录一些刷leetcode时候没想到的一些套路。</p>\\n","autoDesc":true}');export{d as comp,o as data};
