import{_ as a,c as t,a as s,b as l,d as n,o as e}from"./app-D0BDPDwJ.js";const h={};function k(p,i){return e(),t("div",null,[i[0]||(i[0]=s("h1",{id:"函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#函数"},[s("span",null,"函数")])],-1)),i[1]||(i[1]=s("p",null,"暂无",-1)),l(" more "),i[2]||(i[2]=n(`<h2 id="java库" tabindex="-1"><a class="header-anchor" href="#java库"><span>java库</span></a></h2><h3 id="java-中的-collections" tabindex="-1"><a class="header-anchor" href="#java-中的-collections"><span>Java 中的 Collections</span></a></h3><p>在 Java 中，<code>Collections</code> 是一个位于 <code>java.util</code> 包中的类，它包含了一系列静态方法，用于操作和返回集合（Collection）类型的实例。这些方法主要用于对集合进行排序、搜索、替换、倒转等操作。以下是一些常用的 <code>Collections</code> 类方法：</p><ol><li><p><strong>排序</strong></p><ul><li><code>sort(List&lt;?&gt; list)</code>: 按自然顺序对指定列表进行排序。</li><li><code>sort(List&lt;?&gt; list, Comparator&lt;? super T&gt; c)</code>: 按提供的比较器对列表进行排序。</li></ul></li><li><p><strong>搜索和替换</strong></p><ul><li><code>binarySearch(List&lt;? extends Comparable&lt;T&gt;&gt; list, T key)</code>: 在自然排序的列表中二分查找指定元素。</li><li><code>binarySearch(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</code>: 在使用比较器排序的列表中二分查找指定元素。</li><li><code>max(Collection&lt;? extends T&gt; coll)</code>: 返回集合中的最大元素。</li><li><code>min(Collection&lt;? extends T&gt; coll)</code>: 返回集合中的最小元素。</li></ul></li><li><p><strong>替换</strong></p><ul><li><code>replaceAll(List&lt;?&gt; list, Object oldVal, Object newVal)</code>: 将列表中所有等于 <code>oldVal</code> 的元素替换为 <code>newVal</code>。</li></ul></li><li><p><strong>倒转</strong></p><ul><li><code>reverse(List&lt;?&gt; list)</code>: 反转列表的顺序。</li></ul></li><li><p><strong>随机访问</strong></p><ul><li><code>shuffle(List&lt;?&gt; list)</code>: 使用默认随机源对列表进行随机重排。</li><li><code>shuffle(List&lt;?&gt; list, Random rnd)</code>: 使用指定的随机源对列表进行随机重排。</li></ul></li><li><p><strong>同步控制</strong></p><ul><li><code>synchronizedList(List&lt;T&gt; list)</code>: 返回一个线程安全的列表，所有可变操作都是同步的。</li></ul></li><li><p><strong>不可变视图</strong></p><ul><li><code>unmodifiableList(List&lt;? extends T&gt; list)</code>: 返回一个不可修改的列表视图，任何修改尝试都会抛出 <code>UnsupportedOperationException</code>。</li></ul></li><li><p><strong>空集合</strong></p><ul><li><code>emptyList()</code>: 返回一个空的、不可修改的列表。</li><li><code>emptySet()</code>: 返回一个空的、不可修改的集合。</li><li><code>emptyMap()</code>: 返回一个空的、不可修改的映射。</li></ul></li></ol><h3 id="java-中的-队列" tabindex="-1"><a class="header-anchor" href="#java-中的-队列"><span>Java 中的 队列</span></a></h3><ol><li><p><strong>添加元素</strong></p><ul><li><strong><code>add(E e)</code></strong>：将元素 <code>e</code> 添加到队列的末尾。如果队列满了，则抛出 <code>IllegalStateException</code>。</li><li><strong><code>offer(E e)</code></strong>：将元素 <code>e</code> 添加到队列的末尾。如果队列满了，则返回 <code>false</code>，不抛出异常。</li></ul></li><li><p><strong>移除元素</strong></p><ul><li><strong><code>remove()</code></strong>：移除并返回队列头部的元素。如果队列为空，则抛出 <code>NoSuchElementException</code>。</li><li><strong><code>poll()</code></strong>：移除并返回队列头部的元素。如果队列为空，则返回 <code>null</code>。</li></ul></li><li><p><strong>查看元素</strong></p><ul><li><strong><code>element()</code></strong>：返回队列头部的元素但不移除它。如果队列为空，则抛出 <code>NoSuchElementException</code>。</li><li><strong><code>peek()</code></strong>：返回队列头部的元素但不移除它。如果队列为空，则返回 <code>null</code>。</li></ul></li><li><p><strong>检查队列状态</strong></p><ul><li><strong><code>isEmpty()</code></strong>：如果队列为空，则返回 <code>true</code>。</li><li><strong><code>size()</code></strong>：返回队列中的元素数量。</li></ul></li><li><p><strong>转换为数组</strong></p><ul><li><strong><code>toArray()</code></strong>：返回一个包含队列中所有元素的数组。</li><li><strong><code>toArray(T[] a)</code></strong>：返回一个包含队列中所有元素的数组；数组的运行时类型是指定数组的类型。如果指定数组能够容纳队列，则队列中的元素将被存储在这个数组中，否则将分配一个具有指定数组运行时类型和适当大小的新数组。</li></ul></li><li><p><strong>清空队列</strong></p></li></ol><ul><li><strong><code>clear()</code></strong>：移除队列中的所有元素。</li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p><strong>查询子串</strong></p><ul><li>java:<br> 1.indexOf(String str)：返回子字符串 str 在字符串中第一次出现的索引。<br> 2.indexOf(int ch)：返回字符 ch 在字符串中第一次出现的索引。<br> 3.indexOf(String str, int fromIndex)：从 fromIndex 索引处开始搜索，返回子字符串 str 在字符串中第一次出现的索引。<br> 4.indexOf(int ch, int fromIndex)：从 fromIndex 索引处开始搜索，返回字符 ch 在字符串中第一次出现的索引。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查找子字符串 &quot;world&quot; 的索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> index1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index1); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：7</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查找字符 &#39;l&#39; 的索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> index2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;l&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index2); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 从索引 5 开始查找子字符串 &quot;o&quot; 的索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> index3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;o&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index3); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 从索引 5 开始查找字符 &#39;l&#39; 的索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> index4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;l&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index4); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：9</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>处理字符串</strong></p><p>针对下列python代码进行讨论：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">reversed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(words.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>&#39; &#39;.join: 其中join用来遍历可迭代元素，其中.前面的元素被视为连接元素的&quot;胶水&quot;。</li><li>split()：将字符串分割成子字符串，并且返回为列表格式。</li></ol><p>对于java而言：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wordList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">words</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s+&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(wordList);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,wordList);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>tirm(): 用于去除首尾的全部空格和换行符，如果不适用tirm得到的结果[&quot;&quot;, &quot;Hello&quot;, &quot;World&quot;， &quot;&quot;]，相比原结果两端有空白字符。</li><li>split(): 这里使用转义字符加正则表达式\\s+来匹配多个空格，因为在Java中&quot; &quot;这种空格只能匹配单个空格，无法匹配多个。</li></ol>`,18))])}const d=a(h,[["render",k],["__file","函数.html.vue"]]),o=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%87%BD%E6%95%B0.html","title":"函数","lang":"zh-CN","frontmatter":{"tittle":"函数","icon":"pen-to-square","date":"2024-9-18","category":["算法笔记"],"timeline":true,"tag":["函数","算法"],"description":"暂无","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"暂无"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T08:54:35.000Z"}],["meta",{"property":"article:tag","content":"函数"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T08:54:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T08:54:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"java库","slug":"java库","link":"#java库","children":[{"level":3,"title":"Java 中的 Collections","slug":"java-中的-collections","link":"#java-中的-collections","children":[]},{"level":3,"title":"Java 中的 队列","slug":"java-中的-队列","link":"#java-中的-队列","children":[]}]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]}],"git":{"createdTime":1726742071000,"updatedTime":1729673675000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":8}]},"readingTime":{"minutes":3.93,"words":1179},"filePathRelative":"算法笔记/函数.md","localizedDate":"2024年9月18日","excerpt":"\\n<p>暂无</p>\\n","autoDesc":true}');export{d as comp,o as data};
