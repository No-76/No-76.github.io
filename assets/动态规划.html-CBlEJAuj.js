import{_ as p,c as r,a as s,b as d,d as k,e,f as l,g as a,r as A,o as g}from"./app-De_3xszV.js";const B="/assets/SmartSelect_20241014_152901_Samsung%20Notes-C87Dy6DI.jpg",y={};function m(c,i){const t=A("CodeTabs");return g(),r("div",null,[i[16]||(i[16]=s("h1",{id:"动态规划",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#动态规划"},[s("span",null,"动态规划")])],-1)),i[17]||(i[17]=s("p",null,"动态规划的算法核心为明确dp[i]中dp和i代表的含义。",-1)),d(" more "),i[18]||(i[18]=k('<h2 id="数学方法求解动态规划" tabindex="-1"><a class="header-anchor" href="#数学方法求解动态规划"><span>数学方法求解动态规划</span></a></h2><h3 id="_96-不同的二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_96-不同的二叉搜索树"><span>96.不同的二叉搜索树</span></a></h3><ul><li>题目：给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。</li><li>解法：找到的DP状态公式：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>G</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mi>G</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> G(n)=\\sum_{i=1}^{n}G(i-1)\\cdot G(n-i) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></span></p><p>常规方法可直接根据该状态转移函数求解，现给出数学解法，其中涉及到<strong>卡塔兰数：</strong><br><img src="'+B+'" alt="" loading="lazy"><br> 直接根据该组合数求解即可。</p><h2 id="背包问题" tabindex="-1"><a class="header-anchor" href="#背包问题"><span>背包问题</span></a></h2><p>下面有几种背包的不同问题：</p><ul><li>取价值最大问题</li><li>分割等和数组</li><li>分割最相近数组</li><li>基于构造目标和组合方案问题</li><li>基于构造目标和的排列方案问题(<strong>甚至是爬楼梯问题</strong>)</li></ul><p>其中前三种种问题可以归为一类数组求值问题，最后两种可以归为排列组合问题。</p><p>这两类不同的问题分别有3个不同之处：</p><p><strong>1.</strong> dp初始化不同，一个是dp[0]=0一个是dp[0]=1/True，造成这个的原因是dp含义不同，一个代表的是价值，一个代表的是组合数量。<br><strong>2.</strong> 第二层for循环中右侧区间不同，一个是物品的重量一个是物品的序号(对应价值)。<br><strong>3.</strong> dp的状态转移函数不同，一个跟dp[j-i]+i有关，一个跟dp[j-i]有关，原因是dp含义不同。</p><p><strong>排列组合问题中求组和要先把遍历物品，求排列要先遍历背包</strong></p><h3 id="代码模板" tabindex="-1"><a class="header-anchor" href="#代码模板"><span>代码模板</span></a></h3><ul><li>0-1背包:<br> 不同的是单一元素不可重复选取，以下为代码模板：</li></ul>',14)),e(t,{id:"84",data:[{id:"求值"},{id:"组合"},{id:"排列"}]},{title0:l(({value:n,isActive:h})=>i[0]||(i[0]=[a("求值")])),title1:l(({value:n,isActive:h})=>i[1]||(i[1]=[a("组合")])),title2:l(({value:n,isActive:h})=>i[2]||(i[2]=[a("排列")])),tab0:l(({value:n,isActive:h})=>i[3]||(i[3]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (bagweight"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 0")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," values:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(bagweight, "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#61AFEF"}},"weight"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(i)"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          dp[j] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," max"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(dp[j],dp[j"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"i]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"i)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:n,isActive:h})=>i[4]||(i[4]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (target"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," nums:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(target, i"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          dp[j] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," dp[j"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"i]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab2:l(({value:n,isActive:h})=>i[5]||(i[5]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (target"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(target, i"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"):  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," nums:  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"          if"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},">="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j:  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              dp[i] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," dp[i "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),i[19]||(i[19]=s("ul",null,[s("li",null,[a("完全背包:"),s("br"),a(" 通常应对的是数组元素可放回重复选取的问题。模板如下：")])],-1)),e(t,{id:"105",data:[{id:"求值"},{id:"组合"},{id:"排列"}]},{title0:l(({value:n,isActive:h})=>i[6]||(i[6]=[a("求值")])),title1:l(({value:n,isActive:h})=>i[7]||(i[7]=[a("组合")])),title2:l(({value:n,isActive:h})=>i[8]||(i[8]=[a("排列")])),tab0:l(({value:n,isActive:h})=>i[9]||(i[9]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(bag_weight"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 0")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(item_nums):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(item_weight[i],bag_weight"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          dp[j]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"max"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(dp[j],dp[j"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"item_weight[i]]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"item_values[i])")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:n,isActive:h})=>i[10]||(i[10]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (target"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," nums:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", target "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          dp[j] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," dp[j"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"i]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab2:l(({value:n,isActive:h})=>i[11]||(i[11]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (target"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  dp["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", target "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"):  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"      for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," nums:  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"          if"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," i "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},">="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j:  ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              dp[i] "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"+="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," dp[i "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"-"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," j]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),i[20]||(i[20]=k(`<p>同0-1背包不同的是单一元素可以重复选取，因此循环遍历过程采取正序。</p><h2 id="打家劫舍" tabindex="-1"><a class="header-anchor" href="#打家劫舍"><span>打家劫舍</span></a></h2><p>主要有以下几类问题：</p><ul><li>普通数组</li><li>循环数组：分别计算出去第一个和最后一个的普通数组最大值</li><li>树形结构：后序递归，双参数数组记录</li><li>值域打家劫舍：相邻多个无法同时打劫</li></ul><p>通用转移函数:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 普通数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i),dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 树形数组</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(left)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(right),left[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">right[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root.var)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 值域打家劫舍</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 需要多加一个判断保证j的范围正确</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(f[i] , f[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="买卖股票" tabindex="-1"><a class="header-anchor" href="#买卖股票"><span>买卖股票</span></a></h2><p>主要有以下几类问题：</p><ul><li>只能买一次</li><li>能买无数次</li><li>只能买k次</li><li>卖出有冷却期<br> 解决此类问题通常使用二维数组dp[i][j],其中i代表的是第几天，k代表的是今天的状态(买入，卖出，冷却期)，dp通用模板如下：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(prices)):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">k</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          dp[i][j]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j],dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prices[i])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          dp[i][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prices[i])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面模板针对的是最多买卖k次的情况，若只能买卖1次或无数次dp的列数为2，k次的话则为2k，有冷却期则为3。</p><h2 id="数组长度相关" tabindex="-1"><a class="header-anchor" href="#数组长度相关"><span>数组长度相关</span></a></h2><p>有以下几类为题：</p><ul><li>最长上升子序列</li><li>最长连续递增序列</li><li>最长重复子数组</li><li>最长公共子序列</li><li>最短公共超序列<br> 在这几个问题中动态规划相较于遍历搜索的优势在于，能降低一个维度的时间复杂度，比方说第一个问题最长上升子序列如果使用遍历搜索需要2次方复杂度，动态规划可以降到1次方复杂度。这类问题dp数组代表的含义是相同的，即<strong>所求答案的长度</strong>。</li></ul><p><strong>最长公共子序列</strong><br> 长度n+1，考虑左闭右开。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (text1[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text2[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      dp[i][j] = dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      dp[i][j] = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j], dp[i][j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>细节：通常设置长度为n+1,考虑所有状态转移过程条件就行，对于可能越界的转移函数就加个if判断。</p><p><strong>最短公共超序列</strong></p><p>先正向计算出最短超序列长度，再反向填。两字符串最后一个字母相等的话，最短公共超序列最后一个字母肯定也是它们，不等的话就选短的+1.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 正向计算长度</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (text1[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text2[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      dp[i][j] = dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      dp[i][j] = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][j], dp[i][j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最长上升子序列</strong>：</p><p>dp:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums)):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[j]:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i], dp[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二分法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">g </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums)):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> bisect_left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(g, nums[i])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(g))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    g.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums[i])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    g[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[i]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最优划分问题</strong><br> 常用dp递推思路类似最长上升子序列。也就是从尾部进行考虑，考虑针对选定的尾，遍历不同的头。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums)):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,dp[i])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i):  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dp[i],dp[j]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约束划分问题</strong></p><p>考虑的状态转移函数通常是n划分由n-1次划分状态转移而来。</p><h2 id="进阶解法" tabindex="-1"><a class="header-anchor" href="#进阶解法"><span>进阶解法</span></a></h2><p>主要针对于dp的优化算法</p><h3 id="矩阵快速幂" tabindex="-1"><a class="header-anchor" href="#矩阵快速幂"><span>矩阵快速幂</span></a></h3><p>针对于1维递推表达式如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i]=dp[i-1]+dp[i-2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span>和k维1阶的递推表达式(只与一个相差阶有关系)如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=dp[i-1][j-1]+dp[i-1][j-2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span>，可以采用矩阵快速幂求解。时间复杂度均为O(logn)快速幂的基本思想如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      res</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> res</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递推过程中只需要求出系数矩阵n的幂，即可求出答案。</p><h3 id="线段树" tabindex="-1"><a class="header-anchor" href="#线段树"><span>线段树</span></a></h3><p>线段树是一种树形数据结构，用于存储区间数据，并且支持区间查询。可针对打家劫舍进行优化。且不需要树的数据结构，就用数组以及int就能代替树。<br> 下面是线段树的初始化问题,且假设区间长度为k：</p>`,37)),e(t,{id:"276",data:[{id:"python"},{id:"java"}]},{title0:l(({value:n,isActive:h})=>i[12]||(i[12]=[a("python")])),title1:l(({value:n,isActive:h})=>i[13]||(i[13]=[a("java")])),tab0:l(({value:n,isActive:h})=>i[14]||(i[14]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# bit_length(k)为k的二进制位数最高位1的位置，相当于log2(k)+1")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"t "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," for"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," _ "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"in"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," range"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"2"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"<<"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#61AFEF"}},"bit_length"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(k))]]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:n,isActive:h})=>i[15]||(i[15]=[s("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// numberOfLeadingZeros(k)为k的二进制位数前面0的个数，int一共32位，减去前面的0即最前面的1位置")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"t "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}}," int"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"2"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"<<"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"("),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"32"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}}," -"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," Integer"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"numberOfLeadingZeros"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(k)"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},")]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),i[21]||(i[21]=k(`<p>下面给出线段树的跌打构造模板：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 传入的o即为根节。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">r:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    t[o]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">num[l]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  m </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (l</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">r)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(o</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,l,m)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(o</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,m</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,r)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 融合左右子树，可根据需求调整</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  t[o]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t[o</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t[o</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))])}const F=p(y,[["render",m],["__file","动态规划.html.vue"]]),u=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/F/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html","title":"动态规划","lang":"zh-CN","frontmatter":{"tittle":"动态规划","icon":"pen-to-square","date":"2024-10-13T00:00:00.000Z","category":["算法笔记"],"timeline":true,"tag":["算法"],"description":"动态规划的算法核心为明确dp[i]中dp和i代表的含义。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/F/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"动态规划"}],["meta",{"property":"og:description","content":"动态规划的算法核心为明确dp[i]中dp和i代表的含义。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-17T16:05:13.000Z"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-17T16:05:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态规划\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-17T16:05:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"数学方法求解动态规划","slug":"数学方法求解动态规划","link":"#数学方法求解动态规划","children":[{"level":3,"title":"96.不同的二叉搜索树","slug":"_96-不同的二叉搜索树","link":"#_96-不同的二叉搜索树","children":[]}]},{"level":2,"title":"背包问题","slug":"背包问题","link":"#背包问题","children":[{"level":3,"title":"代码模板","slug":"代码模板","link":"#代码模板","children":[]}]},{"level":2,"title":"打家劫舍","slug":"打家劫舍","link":"#打家劫舍","children":[]},{"level":2,"title":"买卖股票","slug":"买卖股票","link":"#买卖股票","children":[]},{"level":2,"title":"数组长度相关","slug":"数组长度相关","link":"#数组长度相关","children":[]},{"level":2,"title":"进阶解法","slug":"进阶解法","link":"#进阶解法","children":[{"level":3,"title":"矩阵快速幂","slug":"矩阵快速幂","link":"#矩阵快速幂","children":[]},{"level":3,"title":"线段树","slug":"线段树","link":"#线段树","children":[]}]}],"git":{"createdTime":1728892217000,"updatedTime":1734451513000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":10}]},"readingTime":{"minutes":6.57,"words":1972},"filePathRelative":"算法笔记/F/动态规划.md","localizedDate":"2024年10月13日","excerpt":"\\n<p>动态规划的算法核心为明确dp[i]中dp和i代表的含义。</p>\\n","autoDesc":true}');export{F as comp,u as data};
