import{_ as n}from"./image-7-D2IAFFCa.js";import{_ as l,c as t,a as s,b as a,d as e,o as h}from"./app-DvqDDgXY.js";const r="/assets/image-DOIWO0oJ.png",p="/assets/image-1-BLyLaI6J.png",k={};function d(o,i){return h(),t("div",null,[i[0]||(i[0]=s("h1",{id:"spring",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring"},[s("span",null,"Spring")])],-1)),i[1]||(i[1]=s("p",null,"笔记未完成状态。",-1)),a(" more "),i[2]||(i[2]=e('<p>Spring特点有：</p><ul><li>MVC三层架构：<br><strong>1.controller</strong>:控制层，接受前端发送的请求，对请求进行处理，并响应数据。<br><strong>2.service</strong>：业务逻辑层，处理具体的业务逻辑。<br><strong>3.dao</strong>：数据访问层/持久层(Data Access Object，负责对数据库的访问操作，包括增删改查。</li><li>IOC&amp;DI:<br><strong>1.IOC(Inversion Of Control)</strong>:对象的控制权由程序自身转移到外部容器，实现解耦。<br><strong>2.DI(Dependency injection)</strong>:容器为应用程序提供运行时，所依赖的资源，成为依赖注入。<br><strong>3.Bean对象</strong>:IOC外部容器中所创建、管理的对象。</li><li>面向切面编程（AOP）:<br> 1.连接点：Joinpoint，可以被AOP控制的方法<br> 2.通知：Advice，重复的逻辑，也就是公用的控制方法<br> 3.切入点：Pointcut，匹配连接点的条件，通知仅在切入点方法执行时应用。</li></ul><h2 id="会话技术" tabindex="-1"><a class="header-anchor" href="#会话技术"><span>会话技术</span></a></h2><p><img src="'+r+'" alt="" loading="lazy"><br> 登陆过程需要建立一次会话，因为HTTP协议是无状态的，在一次会话中可以包含多次请求和响应。</p><ul><li>会话跟踪:一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</li><li>会话跟踪方案： <ul><li>客户端会话跟踪技术：Cookie <ul><li>优点：HTTP协议自带结束</li><li>缺点：移动端无法使用，不安全，用户可以自己禁用，且cookie不能跨域。</li></ul></li><li>服务端会话跟踪技术： Session <ul><li>优点：存储在服务端，更安全</li><li>缺点：服务器集群环境无法使用，cookie的缺点。</li></ul></li><li>令牌技术 <ul><li>优点：支持多端，集群环境，减轻服务器端存储压力。</li><li>缺点：需要自己实现。</li></ul></li></ul></li></ul><h3 id="jwt令牌" tabindex="-1"><a class="header-anchor" href="#jwt令牌"><span>JWT令牌</span></a></h3><p>全称：JSON Web Token</p><h3 id="filter过滤器" tabindex="-1"><a class="header-anchor" href="#filter过滤器"><span>Filter过滤器</span></a></h3><p>是Java Servlet规范的一部分，可以通过实现javax.servlet.Filter接口来创建。作用于Servlet之前，可以对几乎所有的请求进行拦截，包括静态资源（如图片、CSS、JS等）。</p><ul><li>拦截执行过程：<br> 1.执行放行前逻辑。<br> 2.放行。<br> 3.在web服务器中实现与web资源的交互。<br> 4.放行之后的逻辑。</li><li>拦截路径：<br> 1./login(单个)<br> 2./depts/(多个)<br> 3./(全部)</li></ul><h3 id="interceptor拦截器" tabindex="-1"><a class="header-anchor" href="#interceptor拦截器"><span>Interceptor拦截器</span></a></h3><p>是Spring框架提供的一个概念，可以通过实现org.springframework.web.servlet.HandlerInterceptor接口或使用@Interceptor注解来创建。作用于Spring的DispatcherServlet之后，只对经过DispatcherServlet的请求有效，通常不包括静态资源。<br><img src="'+p+`" alt="拦截器与过滤器的区别图" loading="lazy"></p><h3 id="消息转换器" tabindex="-1"><a class="header-anchor" href="#消息转换器"><span>消息转换器</span></a></h3><p>Spring 的消息转换器（HttpMessageConverter）主要负责将请求报文绑定为方法中的形参对象，以及将方法的返回值转换为 HTTP 响应的内容。当 Controller 方法返回一个对象时，Spring MVC 使用消息转换器将该对象转换为 HTTP 响应体的内容<br> 。消息转换器负责将 Java 对象转换为特定的媒体类型，例如 JSON、XML、HTML 等。<br> Spring 还允许通过 extendMessageConverters 方法在配置转换器后扩展或修改转换器列表<br> 。这可以用于添加自定义转换器或者在默认转换器注册后插入自定义转换器。(例如可以自动修改日期格式)</p><h4 id="请求类型" tabindex="-1"><a class="header-anchor" href="#请求类型"><span>请求类型</span></a></h4><ul><li>实体参数<br> 使用方法：通过创建实体类,传入参数<code>User user</code>，类中创建get，set方法以及tostring。</li><li>数组参数<br> 使用方法： <ul><li>传入参数<code>String[] name</code></li><li>传入参数<code>@RequestParam List&lt;String&gt; name</code></li></ul></li><li>日期参数<br> 使用方法： <code>@DateTimeFormat(patterm=yyyy-MM-dd HH:mm:ss)LocalDateTime updatetime</code></li><li>json参数<br> 使用方法：同实体参数不过加入注解,<code>@Requestbody User user</code></li><li>路径参数<br> 使用方法：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/path/{id}/{name}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>统一响应<br> 使用方法：通过构造实体类以包含各种类型的数据，Integer,String等，<code>Public &quot;自定义类&quot; name（类名）</code>,通过写入get，set方法进行包装。</li></ul><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h2><p>笔记未完成状态。</p>`,20)),a(" more "),i[3]||(i[3]=e(`<h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>支持三种格式配置文件：application.properties，application.yml，application.yaml。优先级依次降低。(yml是主流)</p><h3 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置"><span>自动配置</span></a></h3><ul><li>方案一：@ComponentScan，通过该注解，只能扫到包内bean。（使用繁琐）</li><li>方案二：@Import导入，使用该注解导入的类会被加载导IOC容器内。并且可以使用@Enablexxxx注解，封装@Import注解。</li></ul><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h3><ul><li><code>@SpringBootApplication</code><br> 启动类注解由三部分组成： <ul><li><code>@SpringBootConfiguration</code>：声明是一个配置类，因此是可以引入Bean对象的。</li><li><code>@ComponentScan</code></li><li><code>@EnableConfiguration</code>：主要通过封装@Import注解实现。</li></ul></li><li><code>@Conditional</code><br> 作用到方法或类之上，按照一定条件进行判断，符合条件才会注册Bean对象到IOC容器中。</li></ul><h2 id="spring-cash" tabindex="-1"><a class="header-anchor" href="#spring-cash"><span>Spring Cash</span></a></h2><p>Spring Cash是一个框架，实现了基于注解的缓存功能，只需要加一个注解，就能实现缓存功能。<br> Spring Cash提供了一层抽象，底层可以切换不同的缓存实现，例如EHCash，Caffeine，Redis。以下为一些注解：</p><p><code>@EnableCashing:</code>开启缓存功能，通常加在启动类上<br><code>@Cacheable:</code>在方法执行前查询缓存中是否有数据，通常加载方法上。如果有则返回，无则调用方法放入缓存(既能取又能放，常用于查询)<br><code>@CachePut:</code>将方法的返回值放到缓存中(常用于增加)<br><code>@CacheEvict:</code>将一条或多条数据从缓存删除(常用于数据库删除方法)<br> 使用方法示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">CachePut</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cacheNames</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userCache&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#user.id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;result.id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(返回结果)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;p0/a0.id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)(第一个参数)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// @Cahceable同理，可用于查询数据库方法。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-task" tabindex="-1"><a class="header-anchor" href="#spring-task"><span>Spring Task</span></a></h2><p>是一个很小的框架，甚至不需要maven手动导入，只需要在项目启动类通过添加注解<code>@EnableScheduling</code>即可启动。</p><ul><li>使用方法：通过在方法上使用注解<code>@Scheduled(cron = &#39;..&#39;)</code>使用，其中cron表达式可以在线生成。</li></ul><h3 id="cron表达式" tabindex="-1"><a class="header-anchor" href="#cron表达式"><span>cron表达式</span></a></h3><p>cron表达式其实是一个字符串，通过cron表达式可以<strong>定义任务触发的时间</strong><br> 构成规则：分为6或7个域，用空格隔开，分别代表：秒、分钟、小时、日、月、周、年(可选)</p><p>在<a href="https://cron.qqe2.com/" target="_blank">在线Cron表达式生成器</a>里可以根据需要自动生成所需要的表达式。</p><h2 id="标记性接口" tabindex="-1"><a class="header-anchor" href="#标记性接口"><span>标记性接口</span></a></h2><p>记性接口（Marker Interface）是一种不包含任何方法的接口。这种接口的唯一目的是通过实现或继承来标记类，提供某种类型的信息。标记性接口通常用于以下目的：<br> 提供类型信息：标记性接口可以被用来指示某个类具有某种特质或行为，即使它们不包含任何方法。</p><ol><li><p>过滤和筛选：在某些框架中，标记性接口可以用来过滤或筛选出具有特定标记的类。</p></li><li><p>配置和元数据：标记性接口可以用作配置或元数据，以指示某些特定的配置选项或行为。</p></li><li><p>兼容和扩展：在设计API时，标记性接口可以被用来扩展功能，而不需要修改现有的类。</p></li><li><p>注解和反射：标记性接口可以与注解一起使用，通过反射来识别和处理具有特定标记的类。</p></li></ol><p>有以下这些常用的标记行接口：</p><ul><li><p>org.springframework.stereotype.Component</p></li><li><p>org.springframework.transaction.annotation.Transactional</p></li><li><p>java.io.Serializable</p></li><li><p>java.lang.Cloneable</p></li></ul><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h2><h3 id="网关" tabindex="-1"><a class="header-anchor" href="#网关"><span>网关</span></a></h3><p><img src="`+n+`" alt="alt text" loading="lazy"><br> 通过Spring Cloud Gateway，可以轻松实现网关，网关也是一个服务。</p><h3 id="手写负载均衡" tabindex="-1"><a class="header-anchor" href="#手写负载均衡"><span>手写负载均衡</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//1.通过SoringCloud接口DiscoverClient创建对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DiscoverClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> discoverClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//2. 获取服务列表</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServiceInstance</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instancse </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> discoverClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstances</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;service-name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//3. 通过负载均衡获取示例调用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> instancse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RandomUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instancse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()))</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos"><span>Nacos</span></a></h3><p>解决页面请求访问哪个服务的问题。通过1.引入相关依赖和2.配置文件自动完成服务注册。</p><h3 id="openfeign" tabindex="-1"><a class="header-anchor" href="#openfeign"><span>openfeign</span></a></h3><ol><li><strong>使用方法</strong></li></ol><p>是一个声明式的http客户端，基于常见的注解，帮助实现http请求的发送。使用时需要1.引入feign依赖和负载均衡依赖loadbalancer，2.使用用EnableFeignClients注解启动类，3.创建客户端，通过创建接口实现。其中创建客户端代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">FeignClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;item-service&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> itemClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/items&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ItemDTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> queryItemByIds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestParam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ids&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ids</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>且该方法不需要手动实现(原理是实现了动态代理InvocationHandler)，客户端自动实现。且不需要写负载均衡。</p><ol start="2"><li><strong>改写连接池</strong></li></ol><p>因为RestTemplate默认情况下并不会使用连接池，所以一些别的方法进行优化，例如Apache HttpClient和OKHttp,整合OKHttp步骤如下：</p><ol><li>引入依赖</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">github</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">openfeign</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">feign</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">okhttp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置文件</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">feign</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">okhttp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,39))])}const A=l(k,[["render",d],["__file","Spring.html.vue"]]),y=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"tittle":"Spring","icon":"pen-to-square","date":"2024-10-1","category":["Java"],"timeline":true,"tag":["Java"],"description":"笔记未完成状态。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/Spring.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"笔记未完成状态。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T07:17:24.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T07:17:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T07:17:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"会话技术","slug":"会话技术","link":"#会话技术","children":[{"level":3,"title":"JWT令牌","slug":"jwt令牌","link":"#jwt令牌","children":[]},{"level":3,"title":"Filter过滤器","slug":"filter过滤器","link":"#filter过滤器","children":[]},{"level":3,"title":"Interceptor拦截器","slug":"interceptor拦截器","link":"#interceptor拦截器","children":[]},{"level":3,"title":"消息转换器","slug":"消息转换器","link":"#消息转换器","children":[]}]},{"level":2,"title":"SpringBoot","slug":"springboot","link":"#springboot","children":[{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"自动配置","slug":"自动配置","link":"#自动配置","children":[]},{"level":3,"title":"注解","slug":"注解","link":"#注解","children":[]}]},{"level":2,"title":"Spring Cash","slug":"spring-cash","link":"#spring-cash","children":[]},{"level":2,"title":"Spring Task","slug":"spring-task","link":"#spring-task","children":[{"level":3,"title":"cron表达式","slug":"cron表达式","link":"#cron表达式","children":[]}]},{"level":2,"title":"标记性接口","slug":"标记性接口","link":"#标记性接口","children":[]},{"level":2,"title":"微服务","slug":"微服务","link":"#微服务","children":[{"level":3,"title":"网关","slug":"网关","link":"#网关","children":[]},{"level":3,"title":"手写负载均衡","slug":"手写负载均衡","link":"#手写负载均衡","children":[]},{"level":3,"title":"Nacos","slug":"nacos","link":"#nacos","children":[]},{"level":3,"title":"openfeign","slug":"openfeign","link":"#openfeign","children":[]}]}],"git":{"createdTime":1728892217000,"updatedTime":1732691844000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":5}]},"readingTime":{"minutes":7.26,"words":2179},"filePathRelative":"java笔记/Spring.md","localizedDate":"2024年10月1日","excerpt":"\\n<p>笔记未完成状态。</p>\\n","autoDesc":true}');export{A as comp,y as data};
